'use strict';

( function() {
	CKEDITOR.plugins.add( 'datadrop', {
		requires: 'widget',

		onLoad: function() {
			CKEDITOR.addCss(`.cke_datadrop {
                background-color:#DDDBDA; 
                border-radius:100px;
                text-align: center;
                padding: 2px 5px 2px 5px;
                display: inline-block;
                min-width: 90px;
            }`);
		},

		init: function( editor ) {
			editor.widgets.add( 'datadrop', {
				template: '<span class="cke_datadrop">{{}}</span>',

				downcast: function() {
					return new CKEDITOR.htmlParser.text( '{{' + this.data.name + '}}' );
				},

				init: function() {
					this.setData( 'name', this.element.getText().slice( 2, -2 ) );
				},

				data: function() {
					this.element.setText( this.data.name );
				}
            } );
            
            editor.addCommand( 'datadrop', {
                exec: function( editor, data ) {
                    editor.insertHtml(`{{${data}}}`);
                }
            });
		},

		afterInit: function( editor ) {
			var placeholderReplaceRegex = /\{\{([^\{\}])+\}\}/g;

			editor.dataProcessor.dataFilter.addRules( {
				text: function( text, node ) {
					var dtd = node.parent && CKEDITOR.dtd[ node.parent.name ];

					// Skip the case when placeholder is in elements like <title> or <textarea>
					// but upcast placeholder in custom elements (no DTD).
					if ( dtd && !dtd.span )
						return;

					return text.replace( placeholderReplaceRegex, function( match ) {
						// Creating widget code.
						var widgetWrapper = null,
							innerElement = new CKEDITOR.htmlParser.element( 'span', {
								'class': 'cke_datadrop'
							} );

						// Adds placeholder identifier as innertext.
						innerElement.add( new CKEDITOR.htmlParser.text( match ) );
						widgetWrapper = editor.widgets.wrapElement( innerElement, 'datadrop' );

						// Return outerhtml of widget wrapper so it will be placed
						// as replacement.
						return widgetWrapper.getOuterHtml();
					} );
				}
			} );
		}
	} );

} )();